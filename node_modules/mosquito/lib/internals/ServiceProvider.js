'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.ServiceProvider = undefined;

var _Container = require('./Container');

var _Container2 = _interopRequireDefault(_Container);

var _utils = require('./utils');

var utils = _interopRequireWildcard(_utils);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getClassName(clazz) {
	const dec = utils.getClassDeclaration(clazz)[0];
	return dec.id.name;
}

class ProviderBuilder {

	constructor(container = _Container2.default) {
		this.when = name => {
			const provider = this;
			return {
				singleton: clazz => provider.container.register(name, {
					type: 'class',
					strategy: 'singleton',
					resolver: clazz,
					meta: {
						name: getClassName(clazz)
					}
				}),
				instanceOf: clazz => provider.container.register(name, {
					type: 'class',
					strategy: 'instance',
					resolver: clazz,
					meta: {
						name: getClassName(clazz)
					}
				}),
				object: obj => provider.container.register(name, {
					type: 'object',
					strategy: 'singleton',
					resolver: obj
				}),
				copyOf: obj => provider.container.register(name, {
					type: 'object',
					strategy: 'copy',
					resolver: obj
				}),
				resultOf: fn => provider.container.register(name, {
					type: 'function',
					strategy: 'call',
					resolver: fn
				}),
				library: ident => provider.container.register(name, {
					type: 'require',
					strategy: 'require',
					resolver: ident
				})
			};
		};

		this.container = container;
	}

}

class ServiceProvider {
	constructor() {
		this.register = fn => fn(new ProviderBuilder());

		this.registerWith = (container, fn) => fn(new ProviderBuilder(container));
	}

}

exports.ServiceProvider = ServiceProvider; // export default ServiceProvider