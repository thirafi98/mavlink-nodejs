'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.StandardParser = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _util = require('./util');

var util = _interopRequireWildcard(_util);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

const core = require('babel-core');

function filterPluginsList(pluginList) {
	return Array.from(new Set(pluginList.filter(p => p !== 'transform-flow-strip-types').concat(['syntax-flow'])));
}

class StandardParser {

	constructor(str, opts = {}) {
		this.options = {};
		this.cachedTree = null;
		this.cachedBody = null;

		this.source = str;
		this.options = _extends({}, opts, {
			plugins: filterPluginsList(opts.plugins || [])
		});
	}

	get tree() {
		if (this.cachedTree == null) {
			this.createCachedTree();
		}
		return this.cachedTree;
	}

	createCachedTree() {
		if (this.cachedTree != null) return;
		this.cachedBody = core.transform(this.source, this.options).ast;
		this.cachedTree = this.cachedBody.program;
	}

	getExportedClasses() {
		const exports = [];
		const declarations = [];

		this.tree.body.forEach(node => {
			if (util.identIsExport(node.type)) {
				exports.push(node);
			} else {
				for (const dec of util.searchDeclarations(node)) {
					declarations.push(dec);
				}
			}
		});

		return declarations;
	}

	getCleanSource() {
		const vars = this.getExportedClasses();
		let copy = String(this.source);
		for (const v of vars) {
			const start = copy.substring(0, v.start);
			const end = copy.substring(v.end);
			const middle = ' '.repeat(v.end - v.start);
			copy = start + middle + end;
		}
		return copy;
	}

}
exports.StandardParser = StandardParser;